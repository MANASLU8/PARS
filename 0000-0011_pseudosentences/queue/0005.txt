привет 
!ээ ээ !ээ
спасибо что !5 пришли !5  
вечером 
после работы 
мне очень приятно 
я никогда еще не выступал перед
!ээ ээ !ээ более менее большой аудиторией 
так что немного волнуюсь 
!ээ ээ !ээ 
мое выступление посвящено !ээ ээ !ээ но эскуэль базам 
это относительно новое явление 
первые но эскуэль базы появились где-то в конце двухтысячных 
но на самом деле но эксуэль базы про которые там все говорят 
это монго кассандра и тому подобное 
но 
но эскуэль это !ээ ээ !ээ  
никакое не движение это 
нету никакого комитета который там делает какие-то спецификации 
по сути ноу эскуэль это 
!ээ эоо !ээ это то что не является реляционными базами данных
!ээ ээ !ээ но эскуэль расшифровывается не как не эксуэль 
а нот онли экскуэль 
соответственно это не является какой-то такой заменой 
а обычно это должно работать !ээ ээ !ээ как реляционные так и нереляционные базы 
!ээ эо !ээ мое знакомство с ноу эскуэль базами началось с !ээ хмхм !ээ на предыдущем проекте 
так уж получилось что я выполнял довольно много 
уэээ исследовательской работе по базе которая называется риак 
!5 и !5 мне в принципе это дело понравилось 
и я даже начал увлекаться всякими монго кассандрами 
и тому подобными штуками 
вот 
собственно !ээ ээ !ээ про монго кассандру и риак 
я сегодня так вот буду много говорить 
кхм 
так 
когда !ээ ээ !ээ ты упоминаешь ноу эскуэль !1 базу базы !1 
!ээ ээ !ээ
люди как бы приходят в непонимание 
потому что у нас есть уже с семидесятых годов реляционные базы данных 
и не совсем понятно что с ними не так 
!5 и !5 
почему мы например не можем везде и всегда использовать оракл 
потому что 
собственно 
эдгар кодд в семидесятом году из айбиэм 
он предложил реляционную модель 
!ээ ээ !ээ данных 
!1 а в 
ну это математика !1
это формализм 
!2 и это то что доказано им 
!1 на формальной 
с точки !5 зрения !5 науки !1
то есть 
ну работает по идее !2
 и !1 сем семь 
в семьдесят девятом году !1 появился оракл 
в восемьдесят втором ди би два 
!ээ ээ !ээ
эм эс эскуэль сервер в восемьдесят девятом 
!2 самый молодой май эскуэль сервер 
ну вот май эскуэль !2
ну соответсвенно он девяносто восьмого года 
!2 и если так подумать 
то через год он должен или в армию пойти 
или в институт 
вот
ну то есть тоже такое довольно зрелое решение !2
и мы тут появляемся с какими-то 
ноу эскуэль базами 
!1 которым от силы !4 которым от силы !1 там 
!п ну !п пять десять лет  !4
не совсем понятно зачем
да кстати я немного забыл упомянуть о формате 
вы можете задавать вопросы прямо по ходу выступления 
не стоит дожидаться каких-то !ээ аэ !ээ формальных частей для этого 
в конце будет отведена специальная сессия если останется время 
ну а в принципе выступление задумано так чтобы разговаривать 
до реляционных баз данных были какие-нибудь базы данных
!ээ эээ !ээ 
!п ну !п я так понимаю 
что все что угодно можно назвать базой данных 
например файл можно назвать базой данных 
!ээ этоааа !ээ
скорее имеется в виду что были хранилища какие-то 
да были 
так
так вот что не так с реляционными базами данных 
!ээ ээ !ээ по-моему в шестьдесят пятом году гордон мур основатель интел 
он  выдвинул такое предположение 
!1 которое потом подс 
на протяжении нескольких десятков лет оно подтверждалось !1 что каждые два года 
количество транзисторов размещенных на одном кристалле увеличивается в два раза 
соответственно увеличивается и производительность !5 и !5 уменьшается цена всего этого оборудования 
!ээ ээ !ээ потом спустя какое-то время 
там если шестьдесят пятый 
то это тридцать пять лет 
да примерно появились вот эти вот ребята 
первый предложил дешевые телефоны 
которые нам позволили генерить !1 сим всем !1 контент 
 то есть !1 у каждого у каждого из нас !1 появилась возможность !ээ э !ээ постить котят !ээ э !ээ 
вот в систему которую придумал вот тот чувак второй 
соответственно  мы и все сейчас заняты тем !4 что ну там что-то пишем что-то постим что-то такое !4 
!1 на самом деле конечно того что 
ну это !п как бы !п не рокет сайенс !п там !п запостить котенка вконтакте !1
но тем не менее мы все это делаем 
соответственно из-за этого вот произошло !п вот !п примерно такое 
это прогноз циско системз !5 по !5 росту только мобильного трафика 
вот если посмотреть 
то там !ээ ээ !ээ в семнадцатом году ожидается !1 восе двенадцать !1 экзобайт трафика 
!ээ аэ !ээ 
экзобайт если кто не знает это десять в восемнадцатой байт 
это дофига 
вот 
и вот эти вот дофига байт их как-то нужно хранить и пересылать 
ну соответственно нас интересует как их хранить 
!ээ ээ !ээ 
дело в том что !2 все реляционные базы 
ну не все а большинство реляционных баз !2 
 особенно те !1 кото с которыми !1 у нас все возникают ассоциации при слове реляционный 
!п там !п оракл да ил дэбэ два и тому подобное 
они были созданы немного вот до вот этого процесса  когда !1 появились !ээ ээ !ээ появились !1 огромные массивы данных  
вот
если мы посмотрим на наверное самую такую известную и мощную систему оракл которую они предлагают 
это оракл риал аппликейшн кластер 
вот здесь изображена примерно такая упрощенная архитектурка 
!ээ аэ !ээ 
что они предлагают 
по сути оракл это просто процесс запущенный на какой-то машине 
соответсвенно они предлагают объединять эти машины в кластера 
!5 и !5 за счет того что у нас не одна машина на базу данных а много машин
!5 мы !5 увеличиваем !ээ ээ !ээ общий цпу  общую память и соответственно общую производительность 
пытаемся скалировать систему 
!ээ ээ !ээ
как видно  !2 все вот эти вот системы !5 они !5  
все эти базы !2 !5 они !5 имеют общий диск 
как вы думаете для чего 
у кого-нибудь есть варианты почему оракл ну и вообще реляционкам желательно иметь !ээ аэ !ээ шаринговые диски 
синхронизация 
ну не совсем 
это в принципе
общая структура 
вот что 
за что мы так все любим реляционную модель данных 
какие операции позволяют нам легко и просто делать оракл
!5 и !5 как вы думаете как можно сделать джойн 
вот я !п вот !п подумал и придумал два способа
у нас есть все таблицы и мы делаем по ним джойн допустим
на одном компьютере 
на одном диске 
или там на нескольких дисках
ну неважно
нет ну смотри 
у нас здесь куча машин разных и у них общий диск 
!5 и !5 по идее !5 что !5 делается 
оракл вычитывает !ээ ээх !ээ данные одной таблицы 
фильтрует их 
и пытается вычитать !ээ ээ !ээ данные из другой таблицы чтобы сделать джойн 
или есть еще второй способ 
кхм 
второй способ заключается в том что оракл поднимает одну таблицу !1 на од на один инстанс !1 
вторую таблицу на второй инстанс 
и пытается как-то по сети это все рассинхронизовать 
!2 !п ну !п я не уверен что это на самом деле так  но просто !ээ мэээ !ээ 
уверен что точнее уверен  что делается это  все  !2 !1 в на в !1 памяти одной машины  
вот 
но тем не менее если бы это было передача по сети 
то соответственно джойны наши они бы работали несколько дольше чем мы бы хотели 
!ээ э !ээ
ну за счет !п там !п всяких передач их по сети как раз  
соответственно !1 к чему нам 
что нам это говорит !1 
это говорит что 
!ээ аэ !ээ для того чтобы нам заиметь джойны нам нужно или смириться с тем что джойны будут медленно в случае если будет передача по сети 
или в том что мы будем шарить диск между разными инстансами базы данных 
а так как мы шарим диски
между этими инстансами разными 
!5 то !5 как раз дисковые операции становятся таким хорошим затыком 
!5 потому что !5 я уверен что оракл пытается распределить данные таким образом чтобы было меньше коллизий 
чтобы было распределить нагрузку более менее равномерно 
но тем не менее никаких гарантий нету что один !ээ ээ !ээ 
 что два !1 высокона высокоресурсоемких !1 запроса  будут обращаться например к одному диску 
соответственно это приводит к тому что базы ээ не очень хорошо справляются с большими данными и с большой нагрузкой
/вопрос из зала/ 
ну смотри 
!1 репликация !ээ м !ээ реплицируется там по-моему  !1 ну !3 н не !3 соврать   
ну пусть блоки реплицируются !1 в облаке в оракле !1 
самая минимальная единица !ээ ааа !ээ с которой работает оракл 
соответственно если у нас !ээ ааэа !ээ !1 на каком-то на !ээ ээ !ээ на один и тот же блок лежит на вот этом диске !1  на вот этом диске и на вот этом диске 
!ээ аэ !ээ 
!3 не нету !3 гарантий того  что на этом же диске не лежит  какой-нибудь блок !1 который 
!ээ аэаааа !ээ к которому !1 постоянно идет обращение  
соответственно вот это вот !ээ ээ !ээ 
/вопросы из зала до 14:28:79/ 
я просто хотел показать !ээ ээ !ээ боттлнек 
/вопросы из зала до 16:46:83/ 
давайте посмотрим ээ следующий слайдик
я тут !ээ ээ !ээ не на самом деле не очень большое исследование проводил по ценовой политике оракла 
это сайтик орашоп
первая ссылка которую я нашел по в гугле оракл купить лицензию 
собственно 
!3 ва вам !3 наверно плохо видно да 
давайте я вам прочитаю
собственно вот это вот поле 
!3 орак оракла !3  лицензионная политика такая 
что !1 ты покупаешь ли !ээ ээ !ээ 
цена лицензии зависит от количества процессоров на котором будет развернут кластер !1
соответственно вот этот вот винбоксик
!ээ ээ !ээ
это  количество процессоров !1 на нуу в !1 вашем кластере !1 где на каком где !1 будет работать оракл
и вам не видно но там написано тридцать два 
 в принципе !2 тридцать два  процессора 
ну там не процессора а ядра имеется в виду !2 
тридцать два ядра это !п как бы !п для текущих систем это не очень много мягко говоря
вот
и если оракл энтерпрайз эдишн купить риэл аппликейшн кластер то цена внизу будет почти три миллиона долларов
 /из зала/ 
я просто вам хочу рассказать что в принципе большие игроки типа оракла и айбиэма требуют за !5 свои !5 базы !п ну !п !4 такого приличного финансирования !4 
вот
соответственно 
!п ну !п на самом деле  тридцать два процессора это вообще смех 
это ну на самом деле здесь не тридцать два потому что
!ээ ээ !ээ 
там сверху было написано что давайте чуваки вы посчитаете сколько у вас процессоров по такой-то формуле 
и там нужно умножить количество ядер в процессоре  на количество процессоров и умножить на коэффициент 
а коэффициент зависит от типа используемого процессора 
вот я посчитал !5 для !5 ксенонов и коэффициент там ноль пять 
соответственно на самом деле это шестьдесят четыре процессора 
и получается шестьдесят четыре на трицать два 
ну шестьдесят четыре на ноль пять это тридцать два 
что такое шестьдесят четыре процессора 
!1 это на самом деле две два сервака !1 
это два блейда !1 по по восемь по тридцать два ядра !1
это 
ну это мало 
вот 
соответственно если там увеличивать до нескольких тысяч 
там цена тоже увеличивается на значительно 
но понятно что это как бы слабый аргумент 
и если вы будете реально закупать оракл под большой !ээ э !ээ кластер то там вам будут скидки тому подобное 
!1 лицензион лицензионное !1 количество в этом случае будет пересмотрено 
/из зала/ 
так
!5 э чего !5 предложили люди 
давайте мы не будем делать технологических затыков
 вот то что !1 в в !1 оракл RAC был шаринг дисков
 это то что слева изображено !1 два две !1 базы и !4 там !4
ну на самом деле эта картинка немного не о том но 
две базы и диск посередине который они шарят 
давайте мы будем использовать две тачки у которых будет два локальных диска 
и в таком случае у нас не будет затыков на инпут аутпут 
ну соответственно в такой системе как мы уже обговаривали раньше скорее всего не будет работать джойны 
и в большинстве ноу эскуэль баз они действительно не работают
и все проблемы !ээ ээ !ээ !1 которые нужно которые решают !1 джойны они обычно решаются через денормализацию 
таким изящным способом проблему джойнов мы решили 
да
но соответсвенно джойны в больших системах они работают не очень хорошо 
ну смотрите мы опять-таки !1 обсуждаем !ээ э уу !ээ обсуждаем !1 просто !4 объем всего этого !ээ ооу !ээ  !1 все всей !1 этой системы !4 
например какая-нибудь кассандра или риак 
!1 у них !ээ ээ !ээ в настройках при установке можно выбрать !4 там например !4 !ээ ооо !ээ 
они рассчитаны на то чтобы работать в нескольких докцентрах одновременно !1
одна база у вас будет работать одновременно  в нескольких докцентрах 
и это очень !ээ ээ !ээ такой пример из жизни что говорится 
 они именно для этого и созданы были
то есть они рассчитаны !п там !п на тысячи на несколько тысяч десятков тысяч машин кластеры 
!5 и !5 соответственно если мы будем строить распределенный джойн между этими машинами 
то это тогда несерьезно 
!ээ аэ !ээ 
 кхм 
!ээ э !ээ 
так 
есть два таких основных способа масштабирования систем 
первый это мы просто !ээ аээ !ээ увеличиваем производительность !1 каждой маш каждой отдельной машинки !1 отдельно 
соответственно мы !5 пытаемся !5 поднять общую производительность за счет удорожания оборудования 
!5 и !5 в итоге  !ээ э !ээ мы немного приходим в тупик 
потому что цена будет расти так экспоненциально немного 
и при этом !1 у нас 
!ээ э !ээ 
мы !1 все равно упремся в какие-нибудь !ээ э !ээ фундаментальные такие причины 
типа !ээ э !ээ !1 больше процессора например еще 
круче процессора еще !1 нету 
 и что мы будем в этом случае делать 
соответственно горизонтальное масштабирование 
это когда мы вместо того чтобы увеличивать !ээ ээ !ээ мощность одной машины 
мы добавляем еще несколько машин для того чтобы увеличить производительность 
соответственно для горизонтального масштабирования есть такие штуки как репликация и шардинг данных
!п ну !п репликация это понятно 
это просто мы !2 на каждой отдельной машине
!ээ э !ээ 
!п ну !п на нескольких машинах !2 храним !ээ э !ээ !3 з зеркалированные !3 данные 
в связи с этим мы можем !ээ ээ !ээ пойти не на одну машину а сразу на две 
и соответственно выиграть в производительности в два раза 
шардинг это способ разбиения одной сущности 
<split> одной таблицы например если мы говорим о реляционных базах </split>
на части 
соответственно к чему это приводит 
приводит к тому  что если мы !1 сде разбили !1 таблицу на три части 
 и положили их на три разных машины 
то мы ходим опять-таки не на одну машину а  на три разных машины  
и опять-таки мы немного выигрываем в производительности 
так 
теперь несколько слов о монго 
как она устроена и что там такое вообще творится 
монго это довольно молодая опять-таки относительно база 
в две тысячи девятом году появился первый релиз 
она документно-ориентированная 
там внутри хранится !п ну !п бинарное представление джейсона 
собственно если кто не знает 
джейсон он слева нарисован 
!5 это !5
вот как раз-таки джейсон является документом монго 
если вы не видите то 
соответственно кластер монго состоит из нескольких машин 
 на каждой машине может !1 быть !ээ ээ !ээ крутиться !1 несколько баз данных  
каждая база данных состоит из коллекции документов
и соответственно документом является как раз вот этот вот джейсончик 
!ээ  ээ !ээ  
давайте и поговорим /из зала до 24:57/  
!ээ эээ !ээ как работает !ээ эээ !ээ репликация !1 в оракле 
!ээ эээ !ээ в
ой 
в монго !1 
в монго есть такое понятие как реплика сет 
!ээ эээ !ээ
один реплика сет это !ээ эээ !ээ соответственно просто набор машин 
и на каждой из этих машин !ээ эээ !ээ хранятся одинаковые данные 
то есть одинаковые вообще  
не перемешанные каким-то образом а они равноценны 
абсолютно 
соответственно в каждом реплика сете 
<split> вот если здесь посмотреть реплика сет это вот эта вот штука </split>
!ээ аааааэ !ээ 
в каждом реплика сете !ээ эээ !ээ есть праймэри машина 
!5 и !5 все остальные будут являться секондами 
соответственно по умолчанию все запросы на запись и на чтение !5 они !5 идут через !5 праймари !5  машину 
!ээ ээф !ээ
!ээ оф !ээ 
можно !ээ ооооу !ээ делать немного по-другому  
можно запросы на чтение например делать !ээ эээ !ээ со вторичных машин 
но это на у нас приведет к некой потере консистентности данных 
в связи с чем 
потому что 
вообще понятно о чем я говорю 
!ээ эээ !ээ почему мы можем терять консистентность 
потому что данные просто не успеют скопироваться с праймари машины на вторичную машину 
соответственно если мы пойдем !5 на !5 вторичную машину то мы не прочитаем ничего 
там этих данных еще нету 
и вот !1 такая вот штука 
<split> ну они рано или поздно там появятся </split>
 такая штука !1 !5 когда !5 !ээ ээ !ээ данные немного неконсистентны но в в последующем !1 они становятся
они приходят !1 к консистентному состоянию 
называется ивеншуал консистенси 
!5 или !5 если по-русски это консистентность в конечном счете 
как пишут в интернетах 
ну идея в том что  данные просто со временем становятся хорошими
/из зала до 28:36/
смотрите 
!5 соответственно !5    
сейчас выигрыша особого из-за этого нет
 !1 !5 можно !5 
можно !1 !1 только риды например сделать  на отдельном 
на удал 
разрешить все риды через вторичные реплики !1 
и это приведет к !ээ эээ !ээ снижению консистентности данных
кроме того есть режимчик когда мы выставляем !ээ ээ !ээ количество машин !1 на которые должно записаться 
!ээ ээ аа !ээ 
на которые должно записаться документ 
должен записаться документ !1  
соответственно если поставить что например в реплика сете у нас три машины 
и мы говорим что на все три машины у нас должен записаться документ для того чтобы запись была признана успешной 
то да 
мы !ээ ооу !ээ риды у нас получаются быстрыми и консистентными в итоге 
ну соответственно мы начинаем проигрывать по записи 
потому что мы реально дожидаемся пока  данные будут !3 среп среплицированы !3 на все машине реплика сета
и это тоже 
ну
то есть здесь какой-то существует баланс между этими штуками 
!ээ аэа !ээ  
в реплика сете все машины друг друга постоянно опрашивают 
для чего это делается 
для того чтобы понять какая из машин легла 
не легла ли !3 п праймари !3 нода 
соответственно если легла праймари нода то у нас 
!ээ эооооу !ээ так как запись по умолчанию делается через праймари ноду 
ну запись у нас не получится и чтение опять-таки не совсем получится 
в этом случае у нас !ээ эээ !ээ происходит голосование 
!3 выб !ээ у !ээ выбор !3 новой !ээ э !ээ праймари ноды происходит через голосование 
соответственно  если у нас как на картинке праймари легла 
то праймари становится одна из вторичных нод 
и после того как она выбрана 
то у нас опять можно начинать писать на реплика сет или читать с реплика сета  
соответственно в тот момент когда у нас праймари нода не существует 
!1 мы все 
ну все операции по записи !3 на на !3 !3 с скорей !3 всего они у нас будут зафейлены !1 
/из зала до 31:46/ 
а вот непонятно же 
смотри 
праймари нода она должна выбраться наиболее !ээ ээ !ээ быстро 
чтобы !ээ ээ !ээ !1 наша реплика сет заработал опять 
наш реплика сет заработал !1 
а если эти секондари ноды еще будут сравнивать 
а у тебя есть этот кусок данных 
а у меня есть 
я победил 
давай я буду
это ж будет очень долго 
это нужно гонять данные или по крайней мере какие-то метаданные 
32:20 
смотри 
мы например записали десять мегабайт час назад 
!5 и !5 один мегабайт только что  
и десять мегабайт среплицировалось на какую-то ноду !1 а один мегабайт не усп 
а а один мегабайт среплицировался на другую ноду !1
соответственно 
!1 победит та нода у которой 
если победит та нода у которой !1 !1 последняя !ээ пф !ээ более новая дата последней репликации !1 
то мы в итоге проиграем 
/до 34:10/ 
так, смотрите
интересный случай когда у нас например было !ээ ээ !ээ пять машин 
в кластере да 
!ээ ээ !ээ и праймари сеть поделилась таким образом 
что праймари нода вообще легла 
!ээ  ааэ !ээ 
!1 видят друг друга только две друг друга видят !1 и две машины друг друга видят 
 !1 но между собой они !ээ ээ !ээ 
ну они не знают о своем существовании !1 
/из зала/ 
вот в этом случае может получиться что  в реплика сете будет две праймари 
и это как бы не прикольно 
!1 !5 и !5 в таком случае 
ну вообще принцип такой !1 что в случае деления сети 
!ээ аээ !ээ  
!1 выбирают се выбирают праймари !1 только в том ээ в том участке сети где !1 больше больше !1 живых машин 
соответственно например если у нас осталось три и две машины то !1 реплика праймари нода !1 поднимется !ээ аа э !ээ в том куске где у нас три машины 
!1 а две там где две !1 машины они даже не будут пытаться ничего делать 
/до 36:07/ 
но смотрите 
если в реплика сете например !ээ ээ !ээ было 
так 
правило такое 
вот 
если у нас все машины знают сколько машин в данном реплика сете  
соответственно если в этом куске сети !5 остается !5 меньше половины машин 
то там ниче не должно происходить 
там не должно быть голосования
/до 37:23/ 
и соответственно так как у нас голосование 
!1 ну праймари сет праймари  нода !1 выбирается большинством голосов 
а что делать если у нас четное количество машин в реплика сете 
и они всегда могут голосовать !ээ ээ !ээ поровну 
например выбирать 
две машины проголосовало за одну машину 
а две бы машины проголосовало за другую машину 
и они у нас по идее равнозначны 
вот 
!ээ ээ !ээ
соответственно у нас опять-таки праймари нода не заведется 
для такого случая добавляют специального арбитра 
этот арбитр он !ээ ээ !ээ в себе внутри не хранит данные вообще 
он участвует только в голосовании 
вот
!1 и это полу так как он не хранит данных это  легковесная тачка !1
но в рекомендациях пишется что это действительно должна быть отдельная тачка 
для чтобы опять-таки увеличить релайэбилити системы 
воот 
это хороший вопрос 
поэтому она  в принципе и рассчитана не для того чтобы !1 увеличить !ээ ээ !ээ ну чтобы работать хорошо при !1 !ээ ээ !ээ партиционировании сети  
а просто если вы хотите в реплика сет запихнуть четное количество машин 
то давайте вы еще и арбитра туда запихнете 
/из зала/
как раз арбитр он создан для того чтобы немного подешевле все это стало 
а кстати может сделаем перерывчик 
/39/
