#sent_id = 1
#text = привет 

#sent_id = 2
#text = ээ спасибо что пришли вечером после работы 

#sent_id = 3
#text = мне очень приятно 

#sent_id = 4
#text = я никогда ещё не выступал перед ээ более менее большой аудиторией так что немного волнуюсь 

#sent_id = 5
#text = ээ моё пос выступление посвящено ээ но эскуэль базам 

#sent_id = 6
#text = это относительно новое явление 

#sent_id = 7
#text = первые но эскуэль базы появились где-то в конце двухтысячных 

#sent_id = 8
#text = но на самом деле но эксуэль базы про которые все говорят это монго кассандра ээ там и тому подобное что-то

#sent_id = 9
#text = м но но эскуэль это ээ никакое не движение

#sent_id = 10
#text = это нету никакого комитета который там делает какие-то спецификации 

#sent_id = 11
#text = по сути ноу эскуэль это эоо это то что не является реляционными базами данных

#sent_id = 12
#text = ээ но эскуэль ээ расшифровывается не как ээ не эксуэль а нот онли экскуэль 

#sent_id = 13
#text = соответственно это не является какой-то такой заменой а обычно это должно работать ээ как реляционные так и нереляционные базы 

#sent_id = 14
#text = эо мое знакомство с ноу эскуэль базами началось с хмхм на предыдущем проекте 

#sent_id = 15
#text = ээ так уж получилось что я выполнял довольно много уэээ исследовательской работы по базе которая называется риак и мне в принципе это дело понравилось и я даже начал увлекаться всякими монго кассандрами и тому подобными штуками 

#sent_id = 16
#text = вот собственно про монго кассандру и риак я сегодня так буду много говорить 

#sent_id = 17
#text = кхм 

#sent_id = 18
#text = так 

#sent_id = 19
#text = когда ээ ты упоминаешь ноу эскуэль базу базы ээ люди как бы приходят в непонимание потому что у нас есть уже с семидесятых годов ээ реляционные базы данных и не совсем понятно что с ними не так и почему мы например не можем везде и всегда использовать оракл 

#sent_id = 20
#text = потому что собственно эдгар кодд в семидесятом году из айбиэм он ээ предложил реляционную модель ээ данных 

#sent_id = 21
#text = а в ээ ну это математика это формализм и это то что доказано им на формальной с точки зрения науки то есть ээ ну работает по идее 

#sent_id = 22
#text = и сем семь в семьдесят девятом году появился оракл эо в восемьдесят втором ди би два ээ эм эс эскуэль сервер в восемьдесят девятом 

#sent_id = 23
#text = самый молодой иээ май эскуэль сервер ну вот ма май эскуэль 

#sent_id = 24
#text = ну соответственно он девяносто восьмого года и если так подумать то он через год уже должен или в армию пойти или ээ в институт вот ну то есть ээ тоже довольно такое зрелое решение 

#sent_id = 25
#text = и мы тут ээ появляемся с какими-то ноу эскуэль базами которым от силы которым от силы там ну пять десять лет 

#sent_id = 26
#text = не не совсем понятно зачем это

#sent_id = 27
#text = да кстати я з немного забыл упомянуть о формате 

#sent_id = 28
#text = вы можете задавать вопросы прямо по ходу выступления

#sent_id = 29
#text = не стоит дожидаться каких-то аэ формальных частей для этого 

#sent_id = 30
#text = в конце будет отведена специальная сессия если останется время ну а в принципе выступление задумано так чтобы разговаривать 

#sent_id = 31
#text = до реляционных баз данных были какие-нибудь базы данных

#sent_id = 32
#text = эээ ну я так понимаю что всё что угодно можно назвать базой данных например файл можно назвать базой данных 

#sent_id = 33
#text = этоааа скорее имеется в виду что были хранилища какие-то 

#sent_id = 34
#text = да были 

#sent_id = 35
#text = так

#sent_id = 36
#text = так вот что не так с эаа реляционными базами данных эа по-моему в шестьдесят пятом году гордон мур основатель интел он ээ выдвинул такое предположение которое потом подс ээ на протяжении нескольких десятков лет оно э подтверждалось что каждые два года количество транзисторов размещенных на одном ээ кристалле увеличивается в два раза 

#sent_id = 37
#text = соответственно увеличивается и производительность и уменьшается цена всего этого оборудования 

#sent_id = 38
#text = ээ потом спустя какое-то время там если шестьдесят пятый то это тридцать пять лет да примерно появились вот эти вот ээ ребята 

#sent_id = 39
#text = первый предложил ээ дешевые телефоны которые нам позволили генерить сим ком всем контент 

#sent_id = 40
#text = то есть у каждого у каждого из нас появилась возможность э постить котят э вот в систему которую придумал с тот чувак второй 

#sent_id = 41
#text = ээ соответственно мы и все сейчас заняты тем что ну там что-то пишем что-то постим что-то такое 

#sent_id = 42
#text = на самом деле конечно того что ну это как бы не рокет сайенс там запостить котёнка ээ в вконтактик но тем не менее мы все это делаем рано или гм когда или когда-либо делаем 

#sent_id = 43
#text = вот 

#sent_id = 44
#text = соответственно из-за этого произошло вот примерно такое 

#sent_id = 45
#text = это прогноз э циско системз по росту только мобильного трафика 

#sent_id = 46
#text = вот если посмотреть то там ээ в семнадцатом году ожидается восе двенадцать экзобайт трафика 

#sent_id = 47
#text = аэ экзобайт если кто не знает это десять в восемнадцатой байт 

#sent_id = 48
#text = это дофига 

#sent_id = 49
#text = вот 

#sent_id = 50
#text = и вот эти вот ээ дофига байт их как-то нужно хранить и пересылать 

#sent_id = 51
#text = ну соответственно нас интересует как их хранить 

#sent_id = 52
#text = ээ дело в том что все реляционные базы ну не все большинство хм реляционных баз особенно те кото с которыми у нас все ээ возникают ассоциации при слове реляционный там оракл да дэбэ два и тому подобное они были созданы немного вот до вот этого процесса когда появились ээ появились огромные массивы данных вот

#sent_id = 53
#text = если мы посмотрим на наверное самую такую известную и мощную систему оракл которая они предлагают это оракл риал аппликейшн кластер 

#sent_id = 54
#text = вот здесь изображена примерно такая упрощенная архитектурка 

#sent_id = 55
#text = аэ что они предлагают 

#sent_id = 56
#text = ээ по сути оракл это просто процесс запущенный на какой-то машине 

#sent_id = 57
#text = соответственно они предлагают ээ объединять эти машины в кластера и за счет того что у нас ээ не одна машина на базу данных а много машин мы увеличиваем ээ общий цпу общую память и соответственно общую производительность пытаемся скалировать систему 

#sent_id = 58
#text = ээ как ээ видно все вот эти вот системы они все эти базы они имеют общий диск 

#sent_id = 59
#text = как вы думаете для чего 

#sent_id = 60
#text = у кого-нибудь есть варианты почему оракл ну и вообще реляционкам желательно иметь аэ шаринговые диски 

#sent_id = 61
#text = синхронизация 

#sent_id = 62
#text = ээ ну не совсем 

#sent_id = 63
#text = это в принципе

#sent_id = 64
#text = общая структура 

#sent_id = 65
#text = вот ээ что чт ээ за что мы все так любим реляционную модель данных 

#sent_id = 66
#text = ш какие операции позволяют нам ээ легко и просто делать оракл

#sent_id = 67
#text = джоин

#sent_id = 68
#text = вот

#sent_id = 69
#text = и как вы думаете как можно сделать джойн 

#sent_id = 70
#text = вот я вот подумал и придумал два способа

#sent_id = 71
#text = у нас есть все таблицы и мы делаем по ним джойн допустим ну на одном компьютере

#sent_id = 72
#text = ну да

#sent_id = 73
#text = на одном диске или там на нескольких дисках

#sent_id = 74
#text = ну неважно

#sent_id = 75
#text = нет ну смотри вот у нас здесь ээ куча машин разных и у них общий диск 

#sent_id = 76
#text = и по идее что делается аа оракл вычитывает ээх данные родной таблицы фильтрует их и пытается вычитать ээ данные из другой таблицы чтобы сделать джойн 

#sent_id = 77
#text = или есть ещё второй способ 

#sent_id = 78
#text = кхм 

#sent_id = 79
#text = второй способ заключается в том что оракл поднимает одну таблицу на од на один инстанс вторую таблицу на второй инстанс и пытается как-то по сети это всё рассинхронизовать 

#sent_id = 80
#text = ну я не уверен что это на самом деле так но просто хмхм мэээ уверен что точнее уверен что делается это всё в на в памяти одной машины вот 

#sent_id = 81
#text = но тем не менее если бы это было передача по сети то соответственно джойны наши они бы работали несколько дольше чем мы бы хотели 

#sent_id = 82
#text = э ну за счёт там всяких передач их по сети как раз 

#sent_id = 83
#text = ээ соответственно к чему на чт что нам это говорит 

#sent_id = 84
#text = это говорит что аэ для того чтобы нам заиметь джойны нам нужно или смириться с тем что джойны будут медленно в случае если будет передача по сети или в том что мы будем шарить диски между разными инстансами базы данных 

#sent_id = 85
#text = а так как мы шарим диски между этими инстансами разными то как раз вот дисковые операции становятся таким хорошим затыком потому что я уверен что оракл пытается распределить ээ данные таким образом чтобы было меньше коллизий чтобы было распределить ээ нагрузку более менее равномерно 

#sent_id = 86
#text = но тем не менее никаких гарантий нету что один ээ что два высокона высоко ресурсоемких запроса э будут обращаться например к одному диску 

#sent_id = 87
#text = соответственно это приводит к тому что ну базы не не очень хорошо справляются с большими данными и с большой нагрузкой

#sent_id = 88
#text = ну смотри репликация м реплицируется там по-моему ну н не соврать ну пусть блоки ре реплицируются в облаке в оракле самая ми минимальная единица ааа с которой работает оракл 

#sent_id = 89
#text = соответственно если у нас ааэа на каком-то на ээ один и тот же блок лежит на вот этом диске вот этом диске и на вот этом диске аэ не нету гарантий того что на этом же диске не лежит какой-нибудь блок который аэаааа к которому постоянно идет обращение 

#sent_id = 90
#text = соответственно вот это вот ээ 

#sent_id = 91
#text = я просто хотел показать ээ боттлнек 

#sent_id = 92
#text = давайте посмотрим ээ следующий слайдик

#sent_id = 93
#text = я тут ээ ни сам самом деле не очень большое исследование проводил по ценовой политике оракла 

#sent_id = 94
#text = это сайтик орашоп

#sent_id = 95
#text = первая ссылка которую я нашел ээ по в гугле оракл купить лицензию 

#sent_id = 96
#text = аа собственно ва вам наверно плохо видно да давайте я вам прочитаю

#sent_id = 97
#text = собственно вот это вот поле 

#sent_id = 98
#text = оракл у оракл ээ лицензионная политика такая что ты покупаешь ли ээ цена лицензии зависит от количества процессоров на котором ээ будет развернут кластер 

#sent_id = 99
#text = а соответственно вот вот этот вот ээ винбоксик ээ это количество процессоров на ну в вашем кластере где нн на каком где будет работать оракл

#sent_id = 100
#text = и вам не видно но там написано тридцать два 

#sent_id = 101
#text = в принципе тридцать два процессора ну там не не процессора а ядра имеется в виду тридцать два ядра это как бы э для текущих ээ систем это не очень много мягко говоря

#sent_id = 102
#text = вот

#sent_id = 103
#text = и если к оракл энтерпрайз эдишн купить риэл аппликейшн кластер то цена внизу будет почти три миллиона долларов

#sent_id = 104
#text = я просто вам хочу э рассказать что в принципе ээ большие игроки типа оракла и айбиэма требуют за свои базы ну такого приличного финансирования 

#sent_id = 105
#text = вот

#sent_id = 106
#text = соответственно ну на самом деле тридцать два процессора это вообще смех 

#sent_id = 107
#text = это ну на самом деле здесь не тридцать два потому что ээ там ээ сверху было написано что давайте чуваки вы посчитаете сколько у вас процессоров по такой-то формуле 

#sent_id = 108
#text = и там ээ нужно умножить количество ядер в процессоре на количество процессоров и умножить на коэффициент 

#sent_id = 109
#text = а коэффициент зависит от ээ типа используемого процессора 

#sent_id = 110
#text = вот я посчитал для ксенонов и коэффициент там ноль пять 

#sent_id = 111
#text = соответственно на самом деле это шестьдесят четыре процессора 

#sent_id = 112
#text = и получается шестьдесят четыре на трицать два это ну шестьдесят четыре на ноль пять это тридцать два 

#sent_id = 113
#text = эаа что такое шестьдесят четыре процессора это на самом деле две два сервака это два блейда по по восемь по тридцать два ядра 

#sent_id = 114
#text = это ну это мало 

#sent_id = 115
#text = вот 

#sent_id = 116
#text = соответственно если там увеличивать до нескольких тысяч там цена тоже увеличивается на значительно 

#sent_id = 117
#text = но понятно что это как бы с слабый аргумент и если вы будете реально закупать оракл под большой э кластер то там вам будут скидки тому подобное 

#sent_id = 118
#text = лицензион лицензионное количество в этом случае будет пересмотрено 

#sent_id = 119
#text = так

#sent_id = 120
#text = э чего предложили люди 

#sent_id = 121
#text = давайте мы не будем делать ээ технологических затыков

#sent_id = 122
#text = вот то что в ээ в оракл RAC был э шаринг дисков это то что слева изображено два две базы и там ну на самом деле эта картинка немного не о том но две базы и диск посередине который они шарят 

#sent_id = 123
#text = давайте мы будем использовать ээ две тачки у которых будет два локальных диска и в таком случае у нас ээ не будет затыков на инпут аутпут 

#sent_id = 124
#text = ну соответственно в такой системе как мы уже обговаривали раньше скорее всего не будет работать э джойны и в большинстве ноу эскуэль баз они действительно не работают

#sent_id = 125
#text = и все проблемы ээ которые нужно ко которые решают джойны они обычно решаются через ээ денормализацию 

#sent_id = 126
#text = таким изящным способом проблему джойнов мы решили 

#sent_id = 127
#text = да

#sent_id = 128
#text = но соответственно джойны в больших системах они работают не очень хорошо

#sent_id = 129
#text = ну так ээ 

#sent_id = 130
#text = ну смотрите мы опять-таки обсуждаем эуу обсуждаем просто объём всего этого ооу все всей этой системы 

#sent_id = 131
#text = например какая-нибудь кассандра или риак у них ээ в настройках при установке можно выбрать там например ооо они рассчитаны на то чтобы работать в нескольких датацентрах одновременно 

#sent_id = 132
#text = одна база у вас будет работать одновременно в нескольких датацентрах и это очень ээ такой пример из жизни что говорится 

#sent_id = 133
#text = они для этого именно созданы были

#sent_id = 134
#text = то есть они и рассчитаны там на тысячи на несколько тысяч десятков тысяч ээ машин кластеры 

#sent_id = 135
#text = и соответственно если мы будем строить распределенный джойн между этими машинами то это несерьёзно 

#sent_id = 136
#text = аэ 

#sent_id = 137
#text = кхм так аа есть ээ два таких основных э способа масштабирования систем 

#sent_id = 138
#text = первый это мы просто аээ увеличиваем аа производительность каждой машин каждой отдельной машинки отдельно 

#sent_id = 139
#text = соответственно мы пытаемся поднять общую производительность за счёт удорожания оборудования и в итоге э мы немного приходим в тупик потому что цена будет расти так экспоненциально немного и при этом у нас э мы всё равно упрёмся в какие-нибудь э фундаментальные такие причины типа э больше процессора например ещё круче процессора ещё нету 

#sent_id = 140
#text = и что мы будем в этом случае делать 

#sent_id = 141
#text = соответственно горизонтальное масштабирование это когда мы вместо того чтобы увеличивать ээ мощность одной машины мы добавляем ещё несколько машин для того чтобы аа увеличить производительность 

#sent_id = 142
#text = соответственно для горизонтального масштабирования есть такие штуки как ээ репликация и шардинг данных

#sent_id = 143
#text = ну репликация это понятно 

#sent_id = 144
#text = это просто мы на каждой отдельной машине э ну на нескольких ээ машинах э храним э э з зеркалированные данные 

#sent_id = 145
#text = в связи с этим мы можем ээ пойти не на одну машину а сразу на две и соответственно выиграть э в производительности в два раза 

#sent_id = 146
#text = шардинг это способ разбиения одной сущности одной таблицы например если мы говорим о реляционных базах на части 

#sent_id = 147
#text = соответственно к чему это приводит 

#sent_id = 148
#text = приводит к тому что если мы сде э разбили таблицу на три части и положили их на три разных машины то мы ходим опять-таки не на одну машину а на три разных машины и опять-таки мы немного выигрываем в производительности 

#sent_id = 149
#text = так теперь несколько слов о монго 

#sent_id = 150
#text = как она устроена и что там такое вообще творится 

#sent_id = 151
#text = монго это довольно молодая опять-таки относительно база 

#sent_id = 152
#text = в две тысячи девятом году появился первый релиз 

#sent_id = 153
#text = она документно-ориентированная 

#sent_id = 154
#text = там внутри хранится ну бинарное представление джейсона 

#sent_id = 155
#text = аа собственно если кто не знает джейсон он слева нарисован 

#sent_id = 156
#text = это аэ о вот как раз-таки джейсон является документом монго 

#sent_id = 157
#text = если вы не видите то соответственно кластер монго состоит из нескольких машин на каждой машине может быть ээ крутиться несколько баз данных 

#sent_id = 158
#text = ээ каждая база данных состоит из коллекции документов и соответственно документом является как раз вот этот вот джейсончик 

#sent_id = 159
#text = ээ давайте и поговорим

#sent_id = 160
#text = эээ как работает эээ репликация в оракле эээ в ой в монго 

#sent_id = 161
#text = в монго есть такое понятие как реплика сет 

#sent_id = 162
#text = эээ один реплика сет это соответственно просто набор машин и на каждой из этих машин эээ хранятся одинаковые данные то есть одинаковые вообще не не перемешанные каким-то образом а они равноценны абсолютно 

#sent_id = 163
#text = соответственно в каждом реплика сете вот если здесь посмотреть реплика сет это вот эта вот штука аааааэ в каждом реплика сете эээ есть праймэри машина и все остальные будут являться секондами 

#sent_id = 164
#text = соответственно по умолчанию все запросы на запись и на чтение они идут через праймари машину 

#sent_id = 165
#text = ээф оф можно ооооу делать ээ немного по-другому 

#sent_id = 166
#text = можно запросы на чтение например делать со вторичных машин но это на у нас приведёт к ээ некоторой потере консистентности данных 

#sent_id = 167
#text = аээ в связи с чем 

#sent_id = 168
#text = потому что 

#sent_id = 169
#text = вообще понятно о чём я говорю 

#sent_id = 170
#text = эээ почему мы можем терять консистентность потому что данные просто не успеют скопироваться с праймари машины на вторичную машину 

#sent_id = 171
#text = соответственно если мы пойдём на вторичную машину то мы не прочитаем ничего 

#sent_id = 172
#text = там этих данных ещё нету 

#sent_id = 173
#text = и вот такая вот штука ну они рано или поздно там появятся такая штука когда ээ данные немного неконсистентны но в т в последующем они становятся они приходят к консистентному состоянию называется ивеншуал консистенси 

#sent_id = 174
#text = или если по-русски это консистентность в конечном счёте как пишут в ин в интернетах 

#sent_id = 175
#text = ну идея в том что данные просто со временем становятся хорошими

#sent_id = 176
#text = смотрите 

#sent_id = 177
#text = соответственно сейчас ээ выигрыша особого из-за этого нету

#sent_id = 178
#text = можно можно только риды например сделать на отдельн на с удал разрешить все риды через вторичные реплики и это приведёт к эээ снижению консистентности данных

#sent_id = 179
#text = кроме того есть режимчик когда мы выставляем ээ количество машин на которые должно записаться ээаа косо на которые должно записаться документ должен записаться документ 

#sent_id = 180
#text = э соответственно если поставить ээ что например в ээ в реплика сете у нас три машины и мы говорим что на все три машины у нас должен записаться документ для того чтобы запись была признана успешной то да мы ооу у риды у нас получаются быстрыми и консистентными в итоге 

#sent_id = 181
#text = ну соответственно мы начинаем проигрывать по записи потому что мы реально дожидаемся пока э данные будут срепт среплицированы на все машине ээ реплика сета

#sent_id = 182
#text = и это тоже 

#sent_id = 183
#text = ну то есть здесь какой-то существует баланс между этими штуками 

#sent_id = 184
#text = аэа в реплика сете все машины эа друг друга постоянно опрашивают 

#sent_id = 185
#text = ээ для чего это делается 

#sent_id = 186
#text = для того чтобы понять какая из машин легла 

#sent_id = 187
#text = не легла ли пр праймари нода 

#sent_id = 188
#text = соответственно если легла праймари нода то у нас эооооу так как запись по умолчанию делается через праймари ноду ну запись у нас не получится и чтение опять-таки не совсем получится 

#sent_id = 189
#text = в этом случае у нас эээ происходит ээ голосование 

#sent_id = 190
#text = выб у выбор новой праймари ноды происходит через голосование 

#sent_id = 191
#text = соответственно если у нас ээ как на картинке праймари легла то праймари становится одна из ээ вторичных нод 

#sent_id = 192
#text = и после того как она выбрана то у нас опять можно начинать писать на реплика сет или читать с реплика сета 

#sent_id = 193
#text = соответственно в тот момент когда у нас праймари нода не существует мы все ну все операции по записи на нас на скорей всего она они у нас будут ээ зафейлены 

#sent_id = 194
#text = а вот непонятно же 

#sent_id = 195
#text = смотри мм праймари нода она должна выбраться наиболее ээ быстро чтобы ээ наша реплика сет заработал опять наш реплика сет заработал 

#sent_id = 196
#text = а если эти секондари ноды ещё будут сравнивать 

#sent_id = 197
#text = а у тебя есть этот кусок данных 

#sent_id = 198
#text = а у меня есть 

#sent_id = 199
#text = я победил 

#sent_id = 200
#text = давай я буду

#sent_id = 201
#text = это ж будет очень долго 

#sent_id = 202
#text = это нужно гонять данные или по крайней мере какие-то метаданные 

#sent_id = 203
#text = смотри 

#sent_id = 204
#text = мы например записали десять мегабайт час назад и один мегабайт только что 

#sent_id = 205
#text = и десять мегабайт среплицировались на какую-то ноду а один мегабайт не усп а а один мегабайт среплицировался на другую ноду 

#sent_id = 206
#text = соответственно победит та нода у которой если победит та нода у которой последняя пф более новая дата последней репликации то мы в итоге проиграем 

#sent_id = 207
#text = так смотрите

#sent_id = 208
#text = аээ интересный случай когда у нас например было ээ пять машин в кластере да и праймари эм э сеть поделилась таким образом что праймари нода вообще легла 

#sent_id = 209
#text = ааэ видят ээ друг друга только две друг друга видят и две машины друг друга видят но между собой они ээ ну они не знают ээ о своём существовании 

#sent_id = 210
#text = вот 

#sent_id = 211
#text = да в этом случае может получиться что в реплика сете будет две праймари и это как бы не прикольно 

#sent_id = 212
#text = и в таком случае ну вообще принцип такой что в случае деления сети аээ выбирают се выбирают праймари только в том ээ в том участке сети где больше больше живых машин 

#sent_id = 213
#text = соответственно например если у нас осталось три и две машины то реплика праймари нода поднимется аа в том куске где у нас три машины 

#sent_id = 214
#text = а две там где две машины они даже не будут пытаться ничего делать 

#sent_id = 215
#text = но смотрите если в реплика сете например ээ было 

#sent_id = 216
#text = так правило такое вот 

#sent_id = 217
#text = если у нас э все машины знают сколько машин в данном реплика сете 

#sent_id = 218
#text = соответственно если в в этом куске сети остаётся меньше половины машин то там ничё не должно происходить 

#sent_id = 219
#text = там не должно быть голосо

#sent_id = 220
#text = и соответственно так как у нас ээ голосование ну праймари сет праймари нода выбирается большинством голосов а что делать если у нас чётное количество машин в реплика сете и они всегда могут голосовать ээ поровну 

#sent_id = 221
#text = например выбирать ээ две машины проголосовало за одну машину две бы машины проголосовало за другую машину и они у нас по идее равнозначны 

#sent_id = 222
#text = вот 

#sent_id = 223
#text = ээ соответственно у нас опять-таки праймари нода не заведётся 

#sent_id = 224
#text = для такого случая добавляют специального арбитра 

#sent_id = 225
#text = этот арбитр он ээ в себе внутри не хранит данные вообще 

#sent_id = 226
#text = он участвует только в голосовании 

#sent_id = 227
#text = вот

#sent_id = 228
#text = и это полу так как он не хранит данных это аа легковесная тачка но в рекомендациях пишется что это действительно должна быть отдельная тачка для того чтобы опять-таки увеличить релайбилити системы 

#sent_id = 229
#text = вот 

#sent_id = 230
#text = это хороший вопрос 

#sent_id = 231
#text = поэтому она в принципе и рассчитана не для того чтобы увеличить ээ ну чтобы работать хорошо при ээ партиционировании сети а просто если вы хотите в реплика сет запихнуть э чётное количество машин то давайте вы ещё и арбитра туда з запихнёте

#sent_id = 232
#text = как раз арбитр он создан для того чтобы немного подешевле всё это стало 

